#+TITLE: Emacs Configuration
#+AUTHOR: Shota Senga
#+EMAIL: shota@senta.me
#+OPTIONS: toc:nil num:nil
#+STARTUP: content

* Reference
:PROPERTIES:
:VISIBILITY: showall
:END:

- [[https://jwiegley.github.io/use-package/keywords/#mode-interpreter][use-package — Keywords]]
- https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org
- https://github.com/danielmai/.emacs.d/blob/master/config.org
- https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org
- https://ladicle.com/post/config/
- https://github.com/zzamboni/dot-emacs/blob/master/init.org
- https://git.trevdev.ca/trevdev/dotfiles/src/commit/4b684ba5877278aee0d3d6a2e1dea51ed5df6898/emacs/configuration.org

* Install

This configuration is for Emacs version 27, or avobe. Although most part work with older version, =jsx= doesn't.

#+begin_src sh
brew tap daviderestivo/emacs-head
brew install emacs-head --with-cocoa --with-imagemagick --with-jansson --HEAD
#+end_src


* Boot

Define utility variables for the rest of config.

#+begin_src emacs-lisp
(setq my:is-macos (eq window-system 'ns))
#+end_src


* Package Loader

Use =use-package= to configure packages and always ensure install the packages. Read [[https://jwiegley.github.io/use-package/keywords/][the doc]] for each keywords.

#+begin_src emacs-lisp
(eval-when-compile
  (require 'use-package)
  (require 'use-package-ensure)
  (setq use-package-always-ensure t))

(require 'diminish)
(require 'bind-key)
#+end_src

Always compile packages, and use the newest version available.

#+begin_src emacs-lisp
(use-package auto-compile
  :config (auto-compile-on-load-mode))

(setq load-prefer-newer t)
#+end_src

You can try package without isntallation!

#+begin_src emacs-lisp
(use-package try
  :ensure t)
#+end_src


* Apparence

** Font

Use =Hack= as the default font, =Hiragino= for Japanese. It seems [[https://ladicle.com/post/config/#gui-font][there is a way]] to make all font fammily align well.

#+begin_src emacs-lisp
(when window-system
  (setq use-default-font-for-symbols nil)

  ;; To avoid crashing Emacs with =whic-key=
  ;; https://github.com/justbur/emacs-which-key/issues/130#issuecomment-416299329
  (setq inhibit-compacting-font-caches t)

  (set-face-attribute 'default nil :family "Hack"
                      :height 125)
  (set-fontset-font nil
                    'japanese-jisx0208
                    (font-spec :family "Hiragino Kaku Gothic ProN"))
  (setq face-font-rescale-alist '(("Hiragino Kaku Gothic ProN" . 1.0))))
#+end_src

** Window

Run if Emacs runs with =window-system=

#+begin_src emacs-lisp
(when window-system
  ;; hide tool bars
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)

  ;; enter full screen
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; frame title
  (setq frame-title-format '(buffer-file-name "%f" ("%b")))

  ;; transparency
  (set-frame-parameter nil 'alpha 95)
  )
#+end_src

** Theme

My theme of choise is =doom-dracula= which looks better with high contrast compare to dracula original one.

#+begin_src emacs-lisp
(use-package doom-themes
  :custom
  (doom-themes-enable-italic t)
  (doom-themes-enable-bold t)
  :config
  (load-theme 'doom-dracula t)
  (doom-themes-org-config))
#+end_src

** Modeline

I picked =moody= modeline with some tweak.

/TODO: fix glitchy look of separator./

#+begin_src emacs-lisp
(use-package moody
  :config
  (setq x-underline-at-descent-line t)
  (moody-replace-mode-line-buffer-identification)
  (moody-replace-vc-mode)
  (let ((line (face-attribute 'mode-line :underline)))
    (set-face-attribute 'mode-line          nil :font "Hack-12")
    (set-face-attribute 'mode-line-inactive nil :font "Hack-12")
    (set-face-attribute 'mode-line          nil :overline   line)
    (set-face-attribute 'mode-line-inactive nil :overline   line)
    (set-face-attribute 'mode-line-inactive nil :underline  line)
    (set-face-attribute 'mode-line          nil :box        nil)
    (set-face-attribute 'mode-line          nil :background "#64729F")
    (set-face-attribute 'mode-line-inactive nil :box        nil)
    (set-face-attribute 'mode-line-inactive nil :foreground "#626262")
    (set-face-attribute 'mode-line-inactive nil :background "#40424E"))
  :custom
  (moody-mode-line-height 26))
#+end_src

** Small adjustments

Show symbols to indicate empty lines.

#+begin_src emacs-lisp
(toggle-indicate-empty-lines)
#+end_src

Don't show line numbers. Show column numbers.

#+begin_src emacs-lisp
;; (global-linum-mode 0)
(setq column-number-mode t)
;; (setq linum-format "%5d ")
#+end_src


* Global Interface

** Window Control

Select window with S-<ARROW>

#+begin_src emacs-lisp
(windmove-default-keybindings)
(setq windmoove-wrap-around t)
#+end_src

Resize window with M-<ARROW>

#+begin_src emacs-lisp
(global-set-key (kbd "M-<up>") 'enlarge-window)
(global-set-key (kbd "M-<down>") 'shrink-window)
(global-set-key (kbd "M-<left>") 'enlarge-window-horizontally)
(global-set-key (kbd "M-<right>") 'shrink-window-horizontally)
#+end_src

** keybinding Enhancement

=which-key= shows keybindings that follows your input.

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config
  (setq which-key-idle-delay 0.4)
  (which-key-mode))
#+end_src

Redo

/TODO: try undo-tree or download redo+ source/
https://www.emacswiki.org/emacs/RedoPlus

#+begin_src emacs-lisp
(use-package redo+
  :bind ("C-?" . redo)
  :config
  (setq undo-no-redo t))
#+end_src

Search text in region.

#+begin_src emacs-lisp
(defadvice isearch-mode
    (around isearch-mode-default-string
            (forward &optional regexp op-fun recursive-edit word-p) activate)
  (if (and transient-mark-mode mark-active (not (eq (mark) (point))))
      (progn
        (isearch-update-ring (buffer-substring-no-properties (mark) (point)))
        (deactivate-mark)
        ad-do-it
        (if (not forward)
            (isearch-repeat-backward)
          (goto-char (mark))
          (isearch-repeat-forward)))
    ad-do-it))
#+end_src

Enable rectangle region. =C-x SPC= to set mark for region.

#+begin_src emacs-lisp
(cua-mode t)
(setq cua-enable-cua-keys nil)
#+end_src

Jump to anywhere on the screen.

#+begin_src emacs-lisp
(use-package ace-jump-mode
  :bind ("C-;" . ace-jump-mode))
#+end_src

Gradualy expand/condense the region.

#+begin_src emacs-lisp
(use-package expand-region
  :bind (("C-2" . 'er/expand-region)
         ("C-@" . 'er/contract-region)))
#+end_src

Multiple cursors.

#+begin_src emacs-lisp
(use-package multiple-cursors
  :bind (("C->" . 'mc/mark-next-like-this)
         ("C-<" . 'mc/mark-previous-like-this)
         ("C-c C->" . 'mc/mark-all-like-this)))
#+end_src

** Helm

#+begin_src emacs-lisp
;; (use-package helm)
#+end_src


* File Management


* Programming

** Misc

Highlight matched parenceis

#+begin_src emacs-lisp
(show-paren-mode t)
#+end_src

Enable =rainbow-delimiters= for =prog-mode=, not only lispish language.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode)
  :config
  (eldoc-add-command 'paredit-backward-delete
                     'paredit-close-round))
#+end_src

** Git

Magit for Git.

#+begin_src emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status))
#+end_src

Show changed lines.

#+begin_src emacs-lisp
(use-package git-gutter
  :config (global-git-gutter-mode t))
#+end_src

** Snippets

#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (yas-global-mode 1))
#+end_src

** Project Management

Newer version of =Projectile= knows about modern project files like =package.json= and =Pipfile= even though it's not documented.

#+begin_src emacs-lisp
(use-package projectile
  ;; :after "helm"
  :bind-keymap
  ("C-c p" . projectile-command-map) 
  :config
  ;; use projectile globally
  (projectile-global-mode)
  ;; use helm as frontend
  (setq projectile-completion-system 'helm
        projectile-switch-project-action 'helm-projectile)
  ;; and some other
  (setq projectile-sort-order 'recently-active
        projectile-switch-project-action #'projectile-dired))
#+end_src

** Auto Complition


TODO: see this to improve complition
https://git.trevdev.ca/trevdev/dotfiles/src/commit/4b684ba5877278aee0d3d6a2e1dea51ed5df6898/emacs/configuration.org?lang=cs-CZ#company-auto-complete

#+begin_src emacs-lisp
(use-package company
  :hook
  (after-init . global-company-mode)
  :bind
  (("TAB" . company-indent-or-complete-common)
   ("C-." . company-complete-common))
  (:map company-active-map
        ("C-n" . company-select-next)
        ("C-p" . company-select-previous)
        ("<tab>" . company-complete-common-or-cycle)
        :map company-search-map
        ("C-p" . company-select-previous)
        ("C-n" . company-select-next))
  :defines
  (company-dabbrev-ignore-case company-dabbrev-downcase)
  :custom
  (company-idle-delay 0)
  (company-echo-delay 0)
  (company-minimum-prefix-length 3))
#+end_src

Enhance =company-mode= with icons. You need to run ~all-the-icons-install-fonts~ to install icons.

/From [[https://github.com/seagle0128/.emacs.d/blob/master/lisp/init-company.el][the author of company-box]]/

#+begin_src emacs-lisp
(use-package all-the-icons)
(use-package company-box
  :hook (company-mode . company-box-mode)
  :init (setq company-box-backends-colors nil
              company-box-show-single-candidate t
              company-box-max-candidates 50
              company-box-doc-delay 0.5)
  :config
  (with-no-warnings
    ;; Highlight `company-common'
    (defun my-company-box--make-line (candidate)
      (-let* (((candidate annotation len-c len-a backend) candidate)
              (color (company-box--get-color backend))
              ((c-color a-color i-color s-color) (company-box--resolve-colors color))
              (icon-string (and company-box--with-icons-p (company-box--add-icon candidate)))
              (candidate-string (concat (propertize (or company-common "") 'face 'company-tooltip-common)
                                        (substring (propertize candidate 'face 'company-box-candidate)
                                                   (length company-common) nil)))
              (align-string (when annotation
                              (concat " " (and company-tooltip-align-annotations
                                               (propertize " " 'display `(space :align-to (- right-fringe ,(or len-a 0) 1)))))))
              (space company-box--space)
              (icon-p company-box-enable-icon)
              (annotation-string (and annotation (propertize annotation 'face 'company-box-annotation)))
              (line (concat (unless (or (and (= space 2) icon-p) (= space 0))
                              (propertize " " 'display `(space :width ,(if (or (= space 1) (not icon-p)) 1 0.75))))
                            (company-box--apply-color icon-string i-color)
                            (company-box--apply-color candidate-string c-color)
                            align-string
                            (company-box--apply-color annotation-string a-color)))
              (len (length line)))
        (add-text-properties 0 len (list 'company-box--len (+ len-c len-a)
                                         'company-box--color s-color)
                             line)
        line))
    (advice-add #'company-box--make-line :override #'my-company-box--make-line)

    ;; Prettify icons
    (defun my-company-box-icons--elisp (candidate)
      (when (derived-mode-p 'emacs-lisp-mode)
        (let ((sym (intern candidate)))
          (cond ((fboundp sym) 'Function)
                ((featurep sym) 'Module)
                ((facep sym) 'Color)
                ((boundp sym) 'Variable)
                ((symbolp sym) 'Text)
                (t . nil)))))
    (advice-add #'company-box-icons--elisp :override #'my-company-box-icons--elisp))

  (when (and (display-graphic-p)
             (require 'all-the-icons nil t))
    (declare-function all-the-icons-faicon 'all-the-icons)
    (declare-function all-the-icons-material 'all-the-icons)
    (declare-function all-the-icons-octicon 'all-the-icons)
    (setq company-box-icons-all-the-icons
          `((Unknown . ,(all-the-icons-material "find_in_page" :height 0.85 :v-adjust -0.2))
            (Text . ,(all-the-icons-faicon "text-width" :height 0.8 :v-adjust -0.05))
            (Method . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-purple))
            (Function . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-purple))
            (Constructor . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-purple))
            (Field . ,(all-the-icons-octicon "tag" :height 0.8 :v-adjust 0 :face 'all-the-icons-lblue))
            (Variable . ,(all-the-icons-octicon "tag" :height 0.8 :v-adjust 0 :face 'all-the-icons-lblue))
            (Class . ,(all-the-icons-material "settings_input_component" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-orange))
            (Interface . ,(all-the-icons-material "share" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
            (Module . ,(all-the-icons-material "view_module" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
            (Property . ,(all-the-icons-faicon "wrench" :height 0.8 :v-adjust -0.05))
            (Unit . ,(all-the-icons-material "settings_system_daydream" :height 0.85 :v-adjust -0.2))
            (Value . ,(all-the-icons-material "format_align_right" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
            (Enum . ,(all-the-icons-material "storage" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-orange))
            (Keyword . ,(all-the-icons-material "filter_center_focus" :height 0.85 :v-adjust -0.2))
            (Snippet . ,(all-the-icons-material "format_align_center" :height 0.85 :v-adjust -0.2))
            (Color . ,(all-the-icons-material "palette" :height 0.85 :v-adjust -0.2))
            (File . ,(all-the-icons-faicon "file-o" :height 0.85 :v-adjust -0.05))
            (Reference . ,(all-the-icons-material "collections_bookmark" :height 0.85 :v-adjust -0.2))
            (Folder . ,(all-the-icons-faicon "folder-open" :height 0.85 :v-adjust -0.05))
            (EnumMember . ,(all-the-icons-material "format_align_right" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
            (Constant . ,(all-the-icons-faicon "square-o" :height 0.85 :v-adjust -0.05))
            (Struct . ,(all-the-icons-material "settings_input_component" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-orange))
            (Event . ,(all-the-icons-octicon "zap" :height 0.8 :v-adjust 0 :face 'all-the-icons-orange))
            (Operator . ,(all-the-icons-material "control_point" :height 0.85 :v-adjust -0.2))
            (TypeParameter . ,(all-the-icons-faicon "arrows" :height 0.8 :v-adjust -0.05))
            (Template . ,(all-the-icons-material "format_align_center" :height 0.85 :v-adjust -0.2)))
          company-box-icons-alist 'company-box-icons-all-the-icons)))
#+end_src


* Programming/Markup Languages

** Language Server Protocol

I use =eglot= as the front-end of LSP. You need to install language server for each language. See  [[https://github.com/joaotavora/eglot#connecting-to-a-server][eglot doc]] for the details.

#+begin_src emacs-lisp
(use-package eglot :defer t)
#+end_src

** Front-end

*** Prettier

Set up =Prettier= for code fomatting. This requires =Prettier= executable. You can install it by running ~npm install -g~. 

/Keep this section top to define reusable function for a keybinding./

#+begin_src emacs-lisp
(defun my-bind-prettier-js ()
  (message "my-bind-prettier-js hello")
  (local-set-key "\C-\M-\\" 'prettier-js))

(use-package prettier-js
  :commands prettier-js)
  ;; :hook (prettier-js-mode . (lambda ()
  ;;                          (local-set-key (kbd "C-M-\\") prettier-js))))
#+end_src

Some projects I'm currently working on doesn't use =Prettier=, so I cannot enable auto formatting hook globally. You can enable the hook with [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html][Directory Variables]]. Put the code below in =.dir-locals.el=.

#+begin_example
((js-mode . ((eval . (prettier-js-mode t))))
 (web-mode . ((eval . (prettier-js-mode t)))))
#+end_example

*** Markup

#+begin_src emacs-lisp
(use-package web-mode
  :mode
  ("\\.html\\'"
   "\\.phtml\\'"
   "\\.tpl\\.php\\'"
   "\\.jsp\\'"
   "\\.as[cp]x\\'"
   "\\.erb\\'"
   "\\.mustache\\'"
   "\\.djhtml\\'"
   "\\.blade\\.php\\'" ;; move this under PHP
   "\\.ejs\\'"
   "\\.tag\\'")
  :hook (web-mode . #'my-bind-prettier-js)
  :config
  ;; engine
  (setq web-mode-engines-alist
        '(("php"    . "\\.phtml\\'")
          ("ruby"  . "\\.erb\\'")))
  ;; indentation
  (setq web-mode-markup-indent-offset 2
        web-mode-enable-auto-indentation nil
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-indent-style 2
        web-mode-script-padding 0
        web-mode-style-padding 0
        web-mode-block-padding 0))
#+end_src

#+begin_src emacs-lisp
(use-package emmet-mode
  :hook (css-mode web-mode sgml-mode)
  :config
  (setq emmet-self-closing-tag-style " /"
        emmet-move-cursor-between-quotes t))
#+end_src

#+begin_src emacs-lisp
(use-package pug-mode
  :mode ("\\.pug\\'" "\\.jade\\'"))
#+end_src

*** TypeScript

For TypeScript, I use [[https://github.com/ananthakumaran/tide][tide]] instead of eglot due to better TSX support. It requires =typescript= installed globally before using.

#+begin_src sh
npm install -g typescript
#+end_src

As it's documented, I need to define a function to share it in some modes.

#+begin_src emacs-lisp
(defun setup-tide-mode ()
  (interactive)
  (message "setup-tide-mode")
  (my-bind-prettier-js)
  (tide-setup)
  (flycheck-mode t)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode t)
  (tide-hl-identifier-mode t)
  (company-mode t))
#+end_src

Use =typescript-mode= as the major mode for TS.

#+begin_src emacs-lisp
(use-package typescript-mode
  :mode ("\\.ts\\'"))

;; I get max-lisp-eval-depth error with =:hook=. So use add-hook instead.
(add-hook 'typescript-mode-hook #'setup-tide-mode)
#+end_src

And finally, enable tide for =typescript-mode= and =web-mode=.

#+begin_src emacs-lisp
(use-package tide
  :after (typescript-mode js-mode company flycheck))
  ;; :hook ((typescript-mode . tide-setup)
  ;;        (typescript-mode . tide-hl-identifier-mode)))
#+end_src

*** JavaScript

Emacs 27 has grate support of JSX built-in!! Using it with =tide= is a thing.

#+begin_src emacs-lisp
(add-hook 'js-mode-hook #'setup-tide-mode)
;; configure javascript-tide checker to run after your default javascript checker
;; (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append)
;; prevent eslint check command: eslint --print-config .
;;https://github.com/suonlight/.emacs.d/blob/8f9b8a2aa6fc7a38d2b97b0b0c0a6acecf676a65/core/lang-js.el
;; (advice-add 'flycheck-eslint-config-exists-p :override (lambda() t))
#+end_src

*** TSX, JSX

=typescript-mode= doesn't support TSX. So I need to mix it with =web-mode=. (As for JavaScript, =js-mode= supports JSX in Emacs 27.)

#+begin_src emacs-lisp
(use-package web-mode
  :mode ("\\.tsx\\'")
  :hook (web-mode . (lambda ()
                      (when (string-equal "tsx" (file-name-extension buffer-file-name))
                        (setup-tide-mode)))))

;; TODO: enable linter, maybe
;; (flycheck-add-mode 'typescript-tslint 'web-mode) ; tsx
;; (flycheck-add-mode 'javascript-eslint 'web-mode) ; jsx
;; (flycheck-add-next-checker 'javascript-eslint 'jsx-tide 'append)
#+end_src

*** Vue

Vue provides own LSP. However, eglot needs one LSP for one major-mode. So define =vue-mode= as an alias of =web-mode=. (Also see this https://github.com/joaotavora/eglot/issues/47)

#+begin_src emacs-lisp
(use-package web-mode
  :after eglot
  :config
  (define-derived-mode vue-mode web-mode "Vue")
  (add-to-list 'auto-mode-alist '("\\.vue\\'" . vue-mode))
  (add-to-list 'eglot-server-programs '(vue-mode . ("vls"))))
(add-hook 'web-mode-hook #'my-bind-prettier-js)
#+end_src

*** TODO ESLint

setup with Flycheck

*** CSS/SCSS

#+begin_src emacs-lisp
(use-package css-mode
  :config
  (setq css-indent-offset 2))
;; (add-to-list 'company-backends 'company-css))
#+end_src

#+begin_src emacs-lisp
(use-package scss-mode
  :mode ("\\.scss\\'" "\\.sass\\'")
  :config
  (setq scss-compile-at-save nil)
  (add-to-list 'company-backends 'company-css))
#+end_src

#+begin_src emacs-lisp
(use-package less-css-mode :mode "\\.less\\'")
#+end_src

** Python

#+begin_src emacs-lisp
(use-package python-mode
  :defer t
  :config
  ;; And add the path to executables.
  (add-to-list 'exec-path "~/.pyenv/shims"))
#+end_src

You need to install =pls= to use =eglot= for LSP. (see [[https://github.com/palantir/python-language-server][the doc]])

#+begin_src sh
pip install python-language-server 'python-language-server[all]'
#+end_src

** C/C++

You need to install =ccls= to use =eglot= for LSP. (see [[https://github.com/MaskRay/ccls][the doc]])

#+begin_src emacs-lisp
(use-package google-c-style
  :hook ((c-mode-common . google-set-c-style)
         (c-mode-common . 'google-make-newline-indent)))
#+end_src

** Lisp

Define a list of lisp-ish modes to have the same configuration for the modes.
TODO: This may slows down Emacs launch

#+begin_src emacs-lisp
(setq my--lispish-modes '(clojure-mode emacs-lisp-mode lisp-interaction-mode
                                       lisp-mode scheme-mode))
#+end_src

I found =paredit= useful. But, it has very unique keybindings. For the later reference, you can look at below.

- [[http://pub.gajendra.net/src/paredit-refcard.pdf][Cheat sheet (PDF)]]
- [[http://www.daregada.sakuraweb.com/paredit_tutorial_ja.html][日本語チュートリアル]]

TODO: [[https://github.com/abo-abo/lispy][lispy]] seems worth take a look

#+begin_src emacs-lisp
(eval `(use-package paredit
         :hook (,my--lispish-modes . paredit-mode)))
#+end_src

And, .. enable =eldoc=.

#+begin_src emacs-lisp
(use-package eldoc
  :hook (emacs-lisp-mode . eldoc-mode))
#+end_src

Add a keybind for formatting a whole buffer in lisp.

#+begin_src emacs-lisp
(eval `(use-package srefactor
         :hook (,my--lispish-modes
                . (lambda ()
                    (require 'srefactor-lisp)
                    (local-set-key "\C-\M-\\" #'srefactor-lisp-format-buffer)))))
#+end_src

TODO: Try [[https://github.com/joaotavora/sly][SLY]] and/or [[https://common-lisp.net/project/slime/][SLIME]]

** PHP

#+begin_src emacs-lisp
(use-package php-mode
  :defer t
  :after eglot
  :config
  (add-to-list 'eglot-server-programs
               (cons 'php-mode (list "php" (expand-file-name "~/.composer/vendor/bin/php-language-server.php")))))
#+end_src

You need to install =pls= to use =eglot= for LSP. (see [[https://github.com/felixfbecker/php-language-server][the doc]])

#+begin_src sh
composer global require felixfbecker/language-server
composer global run-script --working-dir=$HOME/.composer/vendor/felixfbecker/language-server parse-stubs
#+end_src

/2019/12/28: PHP LSP doesn't work for some function, go to the definition for example./

** Ruby

#+begin_src emacs-lisp
(use-package ruby-mode
  :mode
  ("\\.rake\\'"
   "\\.gemspec\\'"
   "Rakefile"
   "Gemfile"
   "Capfile"
   "Vagrantfile"
   "Berksfle"))
#+end_src

#+begin_src emacs-lisp
(use-package ruby-end)
#+end_src

TODO: look at thoes configurtions for more useful config
https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org#ruby-and-rspec

** Go

You need to install =gopls= to use =eglot= for LSP. (see [[https://github.com/golang/tools/blob/master/gopls/README.md][the doc]])

#+begin_src emacs-lisp
(use-package go-mode
  :bind (:map go-mode-map
              ("C-c C-n" . go-run)
              ("C-c ."   . go-test-current-test)
              ("C-c f"   . go-test-current-file)
              ("C-c a"   . go-test-current-project))
  :config
  (setq gofmt-command "goimports")
  (add-hook 'before-save-hook #'gofmt-before-save))
#+end_src

TODO: look at thoes configurtions for more useful config
https://ladicle.com/post/config/#golang
https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org#golang

** Rust

You need to install the Rust Language Server to use =eglot= for LSP. (see [[https://github.com/rust-lang/rls][the doc]])

#+begin_src sh
rustup update
rustup component add rls rust-analysis rust-src
#+end_src

#+begin_src emacs-lisp
(use-package rust-mode
  :config
  ;; (add-to-list 'exec-path "~/.cargo/bin")
  (setq rust-format-on-save t))
#+end_src

** Fish

#+begin_src emacs-lisp
(use-package fish-mode :defer t)
#+end_src

** JSON

#+begin_src emacs-lisp
(use-package json-mode
  :mode
  ("\\.babelrc\\'"
   "\\.browserslistrc\\'"
   "\\.eslintrc\\'"
   "\\.prettierrc\\'"
   "\\.tslintrc\\'")
  :hook (json-mode . #'my-bind-prettier-js))
#+end_src

** YAML

#+begin_src emacs-lisp
(use-package yaml-mode
  :mode ("\\.yml\\'" "\\.yaml\\'"))
#+end_src

** Markdown

Use =Github Flavored Markdown= for markdown files. It provides tons of functionalities. Check [[https://jblevins.org/projects/markdown-mode/][the document]].

#+begin_src emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("\\.md\\'"  . gfm-mode)
         ("\\.markdown\\'"  . gfm-mode))
  :config
  ;; (setq markdown-open-command "/usr/bin/marked") ; I don't use marked anymore. I need to find a replacement.
  (setq markdown-command "pandoc --standalone --mathjax --from=markdown"))
#+end_src


* org

** Install

Install org from elpa

#+begin_src emacs-lisp
(use-package org
  :ensure org-plus-contrib)
#+end_src

** Display Preference

Set header line faces.

#+begin_src emacs-lisp
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.1))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.1))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.1))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.1))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.1)))))
#+end_src

Pretty style for bullets with =org-bullets==. Thanks to [[https://zhangda.wordpress.com/2016/02/15/configurations-for-beautifying-emacs-org-mode/][this blog post]].

#+begin_src emacs-lisp
(use-package org-bullets
  :hook (org-mode . (lambda ()
                      (org-bullets-mode t)))
  :init
  (defface org-bullet-face
    '((t :weight normal
         :height 0.9))
    "Face for function parameters."
    :group 'org-bullet-face)
  :custom
  (org-bullets-bullet-list '("✣" "✦" "✪" "✡" "❂" "✼")))

#+end_src

Enable =org-indent-mode= globally to show virtual indentations.

#+begin_src emacs-lisp
(setq org-startup-indented t)
#+end_src

Turn on wordwarp.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'visual-line-mode)
#+end_src

** Code Block

Use current window for the src editing.

#+begin_src emacs-lisp
(setq org-src-window-setup 'current-window)
#+end_src

Prefer no indentation in the =src= block.

#+begin_src emacs-lisp
(setq org-edit-src-content-indentation 0)
#+end_src

=[TAB]= should works as same as the language specific mode.

#+begin_src emacs-lisp
(setq org-src-tab-acts-natively t)
#+end_src

Activate languages for Babel. Only =emacs-lisp= is activated in default. The available languages are listed on [[https://orgmode.org/manual/Languages.html][here]].

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((js . t)
   (python . t)))
#+end_src

Do not ask me to confirm evaluation for any languages.

#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src

Default JS template has a problem to run on newer version of =Node.js=. To fix it, replace the template code. /I've only checked on v12.10.0/

#+begin_src emacs-lisp
(setq org-babel-js-function-wrapper
      "process.stdout.write(
  require('util').inspect((() => {
    %s
  })(), { depth: null, compact: true })
)")
#+end_src

Add structure templates for languages which frequently used.

#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("js" . "src js"))
#+end_src

*** TODO add ob-restclient if I find useful

see https://github.com/danielmai/.emacs.d/blob/master/config.org#org-babel-languages

** Task Management

Track when a TODO was maked as =DONE=.

#+begin_src emacs-lisp
(setq org-log-done t)
#+end_src


** Export

Use =ox-hugo= as a exportar for Markdown. (You can use ~org-blackfriday-export-as-markdown~ for plain markdown exportation without front-matter.) For the other format, =pandoc= does a grate job!

#+begin_src emacs-lisp
;; (require 'ox-md)
(use-package ox-hugo :after ox)
(use-package ox-pandoc :after ox :disabled)
#+end_src

** Misc

Enable alphabetical lists.

#+begin_src emacs-lisp
(setq org-list-allow-alphabetical t)
#+end_src

** Capture

TBD

