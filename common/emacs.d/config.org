#+TITLE: Emacs Configuration
#+AUTHOR: Shota Senga
#+EMAIL: shota@senta.me
#+OPTIONS: toc:nil num:nil
#+STARTUP: content

* Boot

Define utility variables for the rest of config.

#+begin_src emacs-lisp
(setq my:is-macos (eq window-system 'ns))
#+end_src


* Package Loader

Use =use-package= to configure packages and always ensure install the packages. Read [[https://jwiegley.github.io/use-package/keywords/][the doc]] for each keywords.

#+begin_src emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+end_src

Always compile packages, and use the newest version available.

#+begin_src emacs-lisp
(use-package auto-compile
  :config (auto-compile-on-load-mode))

(setq load-prefer-newer t)
#+end_src

You can try package without isntallation!

#+begin_src emacs-lisp
(use-package try
  :ensure t)
#+end_src


* Apparence

** Window

Run if Emacs runs with =window-system=

#+begin_src emacs-lisp
(when window-system
  ;; hide tool bars
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)

  ;; enter full screen
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; frame title
  (setq frame-title-format '(buffer-file-name "%f" ("%b")))

  ;; transparency
  (set-frame-parameter nil 'alpha 95)
  )
#+end_src

** Theme

My theme of choise is =doom-dracula= which looks better with high contrast compare to dracula original one.

#+begin_src emacs-lisp
(use-package doom-themes
  :custom
  (doom-themes-enable-italic t)
  (doom-themes-enable-bold t)
  :config
  (load-theme 'doom-dracula t)
  (doom-themes-org-config))
#+end_src

** Modeline

My modeline is =moody= + =minions=. I put some customization to adopt to the theme.

/TODO: fix glitchy look of separator./

#+begin_src emacs-lisp
(use-package moody
  :config
  (setq x-underline-at-descent-line t)
  (moody-replace-mode-line-buffer-identification)
  (moody-replace-vc-mode)
  (let ((line (face-attribute 'mode-line :underline)))
    (set-face-attribute 'mode-line          nil :font "Hack-12")
    (set-face-attribute 'mode-line-inactive nil :font "Hack-12")
    (set-face-attribute 'mode-line          nil :overline   line)
    (set-face-attribute 'mode-line-inactive nil :overline   line)
    (set-face-attribute 'mode-line-inactive nil :underline  line)
    (set-face-attribute 'mode-line          nil :box        nil)
    (set-face-attribute 'mode-line          nil :background "#64729F")
    (set-face-attribute 'mode-line-inactive nil :box        nil)
    (set-face-attribute 'mode-line-inactive nil :foreground "#626262")
    (set-face-attribute 'mode-line-inactive nil :background "#40424E"))
  :custom
  (moody-mode-line-height 26))
#+end_src

(setq moody-mode-line-height 20)

#+begin_src emacs-lisp
(use-package minions
  :config
  ;; (setq minions-mode-line-lighter ""
  ;;       minions-mode-line-delimiters '("" . ""))
  (minions-mode t))
#+end_src

** Small adjustments

Show symbols to indicate empty lines.

#+begin_src emacs-lisp
(toggle-indicate-empty-lines)
#+end_src

Don't show line numbers. Show column numbers.

#+begin_src emacs-lisp
;; (global-linum-mode 0)
(setq column-number-mode t)
;; (setq linum-format "%5d ")
#+end_src


* Global Interface

** Window Control

Select window with S-<ARROW>

#+begin_src emacs-lisp
(windmove-default-keybindings)
(setq windmoove-wrap-around t)
#+end_src

Resize window with M-<ARROW>

#+begin_src emacs-lisp
(global-set-key (kbd "M-<up>") 'enlarge-window)
(global-set-key (kbd "M-<down>") 'shrink-window)
(global-set-key (kbd "M-<left>") 'enlarge-window-horizontally)
(global-set-key (kbd "M-<right>") 'shrink-window-horizontally)
#+end_src

** keybinding Enhancement

=which-key= shows keybindings that follows your input.

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config
  (setq which-key-idle-delay 0.4)
  (which-key-mode))
#+end_src

Redo
/TODO: try undo-tree/

#+begin_src emacs-lisp
(use-package redo+
  :bind ("C-?" . redo)
  :config
  (setq undo-no-redo t))
#+end_src

Search text in region.

#+begin_src emacs-lisp
(defadvice isearch-mode
    (around isearch-mode-default-string
            (forward &optional regexp op-fun recursive-edit word-p) activate)
  (if (and transient-mark-mode mark-active (not (eq (mark) (point))))
      (progn
        (isearch-update-ring (buffer-substring-no-properties (mark) (point)))
        (deactivate-mark)
        ad-do-it
        (if (not forward)
            (isearch-repeat-backward)
          (goto-char (mark))
          (isearch-repeat-forward)))
    ad-do-it))
#+end_src

Enable rectangle region. =C-x SPC= to set mark for region.

#+begin_src emacs-lisp
(cua-mode t)
(setq cua-enable-cua-keys nil)
#+end_src

Jump to anywhere on the screen.

#+begin_src emacs-lisp
(use-package ace-jump-mode
  :bind ("C-;" . ace-jump-mode))
#+end_src

Gradualy expand/condense the region.

#+begin_src emacs-lisp
(use-package expand-region
  :bind (("C-2" . 'er/expand-region)
         ("C-@" . 'er/contract-region)))
#+end_src

Multiple cursors.

#+begin_src emacs-lisp
(use-package multiple-cursors
  :bind (("C->" . 'mc/mark-next-like-this)
         ("C-<" . 'mc/mark-previous-like-this)
         ("C-c C->" . 'mc/mark-all-like-this)))
#+end_src

** Helm

#+begin_src emacs-lisp
;; (use-package helm)
#+end_src


* File Management


* Programming

** Project Management

#+begin_src emacs-lisp
(use-package projectile
  ;; :after "helm"
  :bind-keymap
  ("C-c p" . projectile-command-map) 
  :config
  (setq projectile-completion-system 'helm
        projectile-switch-project-action 'helm-projectile)
  (projectile-global-mode))
#+end_src

** Complition

#+begin_src emacs-lisp
(use-package company
  :hook
  (after-init . global-company-mode)
  :bind
  (("C-." . company-complete-common))
  (:map company-active-map
        ("C-n" . company-select-next)
        ("C-p" . company-select-previous)
        ("<tab>" . company-complete-common-or-cycle)
        :map company-search-map
        ("C-p" . company-select-previous)
        ("C-n" . company-select-next))
  :defines
  (company-dabbrev-ignore-case company-dabbrev-downcase)
  :custom
  (company-idle-delay 0)
  (company-echo-delay 0)
  (company-minimum-prefix-length 1))
#+end_src

Enhance =company-mode= with icons. You need to run ~all-the-icons-install-fonts~ to install icons.

/From [[https://github.com/seagle0128/.emacs.d/blob/master/lisp/init-company.el][the author of company-box]]/

#+begin_src emacs-lisp
(use-package all-the-icons)
(use-package company-box
  :hook (company-mode . company-box-mode)
  :init (setq company-box-backends-colors nil
              company-box-show-single-candidate t
              company-box-max-candidates 50
              company-box-doc-delay 0.5)
  :config
  (with-no-warnings
    ;; Highlight `company-common'
    (defun my-company-box--make-line (candidate)
      (-let* (((candidate annotation len-c len-a backend) candidate)
              (color (company-box--get-color backend))
              ((c-color a-color i-color s-color) (company-box--resolve-colors color))
              (icon-string (and company-box--with-icons-p (company-box--add-icon candidate)))
              (candidate-string (concat (propertize (or company-common "") 'face 'company-tooltip-common)
                                        (substring (propertize candidate 'face 'company-box-candidate)
                                                   (length company-common) nil)))
              (align-string (when annotation
                              (concat " " (and company-tooltip-align-annotations
                                               (propertize " " 'display `(space :align-to (- right-fringe ,(or len-a 0) 1)))))))
              (space company-box--space)
              (icon-p company-box-enable-icon)
              (annotation-string (and annotation (propertize annotation 'face 'company-box-annotation)))
              (line (concat (unless (or (and (= space 2) icon-p) (= space 0))
                              (propertize " " 'display `(space :width ,(if (or (= space 1) (not icon-p)) 1 0.75))))
                            (company-box--apply-color icon-string i-color)
                            (company-box--apply-color candidate-string c-color)
                            align-string
                            (company-box--apply-color annotation-string a-color)))
              (len (length line)))
        (add-text-properties 0 len (list 'company-box--len (+ len-c len-a)
                                         'company-box--color s-color)
                             line)
        line))
    (advice-add #'company-box--make-line :override #'my-company-box--make-line)

    ;; Prettify icons
    (defun my-company-box-icons--elisp (candidate)
      (when (derived-mode-p 'emacs-lisp-mode)
        (let ((sym (intern candidate)))
          (cond ((fboundp sym) 'Function)
                ((featurep sym) 'Module)
                ((facep sym) 'Color)
                ((boundp sym) 'Variable)
                ((symbolp sym) 'Text)
                (t . nil)))))
    (advice-add #'company-box-icons--elisp :override #'my-company-box-icons--elisp))

  (when (and (display-graphic-p)
             (require 'all-the-icons nil t))
    (declare-function all-the-icons-faicon 'all-the-icons)
    (declare-function all-the-icons-material 'all-the-icons)
    (declare-function all-the-icons-octicon 'all-the-icons)
    (setq company-box-icons-all-the-icons
          `((Unknown . ,(all-the-icons-material "find_in_page" :height 0.85 :v-adjust -0.2))
            (Text . ,(all-the-icons-faicon "text-width" :height 0.8 :v-adjust -0.05))
            (Method . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-purple))
            (Function . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-purple))
            (Constructor . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-purple))
            (Field . ,(all-the-icons-octicon "tag" :height 0.8 :v-adjust 0 :face 'all-the-icons-lblue))
            (Variable . ,(all-the-icons-octicon "tag" :height 0.8 :v-adjust 0 :face 'all-the-icons-lblue))
            (Class . ,(all-the-icons-material "settings_input_component" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-orange))
            (Interface . ,(all-the-icons-material "share" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
            (Module . ,(all-the-icons-material "view_module" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
            (Property . ,(all-the-icons-faicon "wrench" :height 0.8 :v-adjust -0.05))
            (Unit . ,(all-the-icons-material "settings_system_daydream" :height 0.85 :v-adjust -0.2))
            (Value . ,(all-the-icons-material "format_align_right" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
            (Enum . ,(all-the-icons-material "storage" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-orange))
            (Keyword . ,(all-the-icons-material "filter_center_focus" :height 0.85 :v-adjust -0.2))
            (Snippet . ,(all-the-icons-material "format_align_center" :height 0.85 :v-adjust -0.2))
            (Color . ,(all-the-icons-material "palette" :height 0.85 :v-adjust -0.2))
            (File . ,(all-the-icons-faicon "file-o" :height 0.85 :v-adjust -0.05))
            (Reference . ,(all-the-icons-material "collections_bookmark" :height 0.85 :v-adjust -0.2))
            (Folder . ,(all-the-icons-faicon "folder-open" :height 0.85 :v-adjust -0.05))
            (EnumMember . ,(all-the-icons-material "format_align_right" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
            (Constant . ,(all-the-icons-faicon "square-o" :height 0.85 :v-adjust -0.05))
            (Struct . ,(all-the-icons-material "settings_input_component" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-orange))
            (Event . ,(all-the-icons-octicon "zap" :height 0.8 :v-adjust 0 :face 'all-the-icons-orange))
            (Operator . ,(all-the-icons-material "control_point" :height 0.85 :v-adjust -0.2))
            (TypeParameter . ,(all-the-icons-faicon "arrows" :height 0.8 :v-adjust -0.05))
            (Template . ,(all-the-icons-material "format_align_center" :height 0.85 :v-adjust -0.2)))
          company-box-icons-alist 'company-box-icons-all-the-icons)))
#+end_src

** Snippets

** Git

Magit for Git.

#+begin_src emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status))
#+end_src

Show changed lines.

#+begin_src emacs-lisp
(use-package git-gutter
  :config (global-git-gutter-mode t))
#+end_src

* Programming Languages

** Python

** C/C++

** Web (HTML, CSS, JavaScript)

** PHP

** Lisp

** Ruby

** Go

** Rust


* org

** Install

Install org from elpa

#+begin_src emacs-lisp
(use-package org
  :ensure org-plus-contrib)
#+end_src


** Display Preference

Pretty style for bullets with =org-bullets==

#+begin_src emacs-lisp
(use-package org-bullets
  :hook (org-mode . (lambda () (org-bullets-mode t))))
#+end_src

Enable =org-indent-mode= globally to show virtual indentations.

#+begin_src emacs-lisp
(setq org-startup-indented t)
#+end_src

Turn on wordwarp.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'visual-line-mode)
#+end_src


** Code Block

Use current window for the src editing.

#+begin_src emacs-lisp
(setq org-src-window-setup 'current-window)
#+end_src

Prefer no indentation in the =src= block.

#+begin_src emacs-lisp
(setq org-edit-src-content-indentation 0)
#+end_src

=[TAB]= should works as same as the language specific mode.

#+begin_src emacs-lisp
(setq org-src-tab-acts-natively t)
#+end_src

Activate languages for Babel. Only =emacs-lisp= is activated in default. The available languages are listed on [[https://orgmode.org/manual/Languages.html][here]].

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((js . t)
   (python . t)))
#+end_src

Do not ask me to confirm evaluation for any languages.

#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src

Default JS template has a problem to run on newer version of =Node.js=. To fix it, replace the template code. /I've only checked on v12.10.0/

#+begin_src emacs-lisp
(setq org-babel-js-function-wrapper
      "process.stdout.write(
  require('util').inspect((() => {
    %s
  })(), { depth: null, compact: true })
)")
#+end_src

Add structure templates for languages which frequently used.

#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("js" . "src js"))
#+end_src

*** TODO add ob-restclient if I find useful

see https://github.com/danielmai/.emacs.d/blob/master/config.org#org-babel-languages


** Task Management

Track when a TODO was maked as =DONE=.

#+begin_src emacs-lisp
(setq org-log-done t)
#+end_src



** Export

Use =ox-hugo= as a exportar for Markdown. (You can use ~org-blackfriday-export-as-markdown~ for plain markdown exportation without front-matter.) For the other format, =pandoc= does a grate job!

#+begin_src emacs-lisp
;; (require 'ox-md)
(use-package ox-hugo :after ox)
(use-package ox-pandoc :after ox :disabled)
#+end_src


** Misc

Enable alphabetical lists.

#+begin_src emacs-lisp
(setq org-list-allow-alphabetical t)
#+end_src


** Capture

TBD


* Links

- https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org
- https://github.com/danielmai/.emacs.d/blob/master/config.org
- https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org
- https://ladicle.com/post/config/
- https://github.com/zzamboni/dot-emacs/blob/master/init.org
